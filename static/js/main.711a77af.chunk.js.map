{"version":3,"sources":["Timer/Timer.tsx","TololBlock/Toolblock.tsx","Controls/Controls.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Timer","mode","timeDisplay","id","ToolBlock","type","value","handleClick","onClick","Controls","active","handleReset","handlePlayPause","timeFormat","time","App","useState","setTime","sessionLength","setSessionLength","breakLength","setBreakLength","setMode","isActive","setIsActive","isSessionPassed","setIsSessionPassed","myAudio","Audio","handleAdjustment","increment","inc","useEffect","play","useInterval","className","moment","format","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAgBeA,EATsB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC1C,OACI,6BACI,wBAAIC,GAAG,eAAyB,YAATF,EAAsB,UAAY,SACzD,wBAAIE,GAAG,aAAaD,KCUjBE,EAd8B,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACzD,OACI,6BACI,uCAASF,EAAT,YACA,6BACI,4BAAQF,GAAE,UAAKE,EAAL,cAAuBG,QAAS,kBAAMD,GAAY,EAAOF,KAAnE,KACA,yBAAKF,GAAE,UAAKE,EAAL,YAAqBC,GAC5B,4BAAQH,GAAE,UAAKE,EAAL,cAAuBG,QAAS,kBAAMD,GAAY,EAAMF,KAAlE,QCGDI,EAV4B,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,gBAC/D,OACI,6BACI,4BAAQT,GAAG,aAAaK,QAASI,GAAkBF,EAAS,8CAAgC,yCAC5F,4BAAQP,GAAG,QAAQK,QAASG,GAA5B,Y,OCYNE,G,MAAa,SAACC,GAClB,OAJc,GAIPA,EAHQ,MAqFFC,EA/Ee,WAAO,IAAD,EAEVC,mBAASH,EAAW,KAFV,mBAE3BC,EAF2B,KAErBG,EAFqB,OAGQD,mBAAS,IAHjB,mBAG3BE,EAH2B,KAGZC,EAHY,OAIIH,mBAAS,IAJb,mBAI3BI,EAJ2B,KAIdC,EAJc,OAKVL,mBAAS,WALC,mBAK3Bf,EAL2B,KAKrBqB,EALqB,OAMFN,oBAAS,GANP,mBAM3BO,EAN2B,KAMjBC,EANiB,OAOYR,oBAAS,GAPrB,mBAO3BS,EAP2B,KAOVC,EAPU,KAQ5BC,EAAU,IAAIC,MAbR,qFAiBNC,EAAmB,SAACC,EAAoBzB,GAC5C,IAAI0B,EAAOD,EAAa,GAAM,GACP,KAAlBZ,GAAwC,KAAhBE,IAAuBU,KAC7B,IAAlBZ,GAAuC,IAAhBE,GAAuBU,KACjC,YAATzB,EACPc,EAAiBD,EAAgBa,GACf,UAAT1B,GACTgB,EAAeD,EAAcW,KAIjCC,qBAAU,WACM,IAATlB,GAAyB,YAATb,IACnBgB,EAAQJ,EAAWO,IACnBE,EAAQ,SACRK,EAAQM,QAGI,IAATnB,GAAyB,UAATb,IACnBgB,EAAQJ,EAAWK,IACnBI,EAAQ,cAET,CAACR,EAAMb,IAgBViC,aAAY,WAAQjB,GAAQ,SAACH,GAAD,OAAUA,EAxDvB,SAwD2CS,EAxD3C,IAwDiE,MAYhF,OACE,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAAlB,kBAGA,kBAAC,EAAD,CAAOlC,KAAMA,EAAMC,YAAakC,IAAOtB,GAAMuB,OAAO,WACpD,yBAAKF,UAAU,gBACb,kBAAC,EAAD,CAAW9B,KAAK,UAAUC,MAAOY,EAAeX,YAAasB,IAC7D,kBAAC,EAAD,CAAWxB,KAAK,QAAQC,MAAOc,EAAab,YAAasB,KAE3D,kBAAC,EAAD,CAAUnB,OAAQa,EAChBZ,YApCc,WAClBQ,EAAiB,IACjBE,EAAe,GACfJ,EAAQJ,EAAW,KACnBW,GAAY,GACZE,GAAmB,IAgCfd,gBAtBkB,WACjBa,EAKHD,GAAaD,IAJbN,EAAQJ,EAAWK,IACnBM,GAAaD,GACbG,GAAmB,SCvELY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.711a77af.chunk.js","sourcesContent":["import React from 'react';\n\n\ninterface ITimerProps {\n    mode: string;\n    timeDisplay: string;\n}\nconst Timer: React.FC<ITimerProps> = ({ mode, timeDisplay }) => {\n    return (\n        <div>\n            <h1 id=\"timer-label\">{(mode === \"session\") ? \"Session\" : \"Break\"}</h1>\n            <h1 id=\"time-left\">{timeDisplay}</h1>\n        </div>)\n\n}\n\nexport default Timer;\n\n\n\n\n\n","import React from 'react';\n\ninterface IToolBlockProps {\n    type: string;\n    value: number;\n    handleClick: Function;\n}\nconst ToolBlock: React.FC<IToolBlockProps> = ({ type, value, handleClick }) => {\n    return (\n        <div>\n            <div>{`${type} Length`}</div>\n            <div>\n                <button id={`${type}-decrement`} onClick={() => handleClick(false, type)} >-</button>\n                <div id={`${type}-length`}>{value}</div>\n                <button id={`${type}-increment`} onClick={() => handleClick(true, type)}>+</button>\n            </div>\n        </div>\n\n    )\n}\n\nexport default ToolBlock;","import React from 'react';\n\ninterface IControlsProps {\n    active: boolean;\n    handleReset: () => void;\n    handlePlayPause: () => void;\n}\nconst Controls: React.FC<IControlsProps> = ({ active, handleReset, handlePlayPause }) => {\n    return (\n        <div>\n            <button id=\"start_stop\" onClick={handlePlayPause}>{active ? <span>&#10074;&#10074;</span> : <span>&#9658;</span>}</button>\n            <button id=\"reset\" onClick={handleReset}>&#8635;</button>\n        </div>\n\n    )\n}\n\nexport default Controls;","import React, { useState, useEffect, useRef } from 'react';\nimport moment from 'moment';\nimport Timer from './Timer/Timer';\nimport ToolBlock from './TololBlock/Toolblock';\nimport Controls from './Controls/Controls';\nimport useInterval from 'use-interval';\n\nimport './App.css';\n\n\ninterface IState {\n  time?: number;\n  sessionLength?: number;\n  breakLength?: number;\n  mode?: string;\n  isActive?: boolean;\n  isSessionPassed?: boolean;\n  myAudio?: any\n\n}\nconst seconds = 60;\nconst mSeconds = 1000;\nconst sound = \"https://s3-us-west-1.amazonaws.com/benjaminadk/Data+synth+beep+high+and+sweet.mp3\";\nconst timeFormat = (time: number): number => {\n  return time * seconds * mSeconds\n}\n\nconst App: React.FC<IState> = () => {\n\n  const [time, setTime] = useState(timeFormat(25));\n  const [sessionLength, setSessionLength] = useState(0.2);\n  const [breakLength, setBreakLength] = useState(0.2);\n  const [mode, setMode] = useState('session');\n  const [isActive, setIsActive] = useState(false);\n  const [isSessionPassed, setIsSessionPassed] = useState(false);\n  const myAudio = new Audio(sound);\n\n\n\n  const handleAdjustment = (increment: boolean, type: string) => {\n    let inc = (increment) ? +1 : -1;\n    if ((sessionLength === 60 || breakLength === 60) && increment) return\n    if ((sessionLength === 1 || breakLength === 1) && !increment) return\n    else if (type === \"session\") {\n      setSessionLength(sessionLength + inc)\n    } else if (type === \"break\") {\n      setBreakLength(breakLength + inc)\n    }\n  }\n\n  useEffect(() => {\n    if ((time === 0) && (mode === \"session\")) {\n      setTime(timeFormat(breakLength));\n      setMode(\"break\");\n      myAudio.play();\n    }\n\n    if ((time === 0) && (mode === \"break\")) {\n      setTime(timeFormat(sessionLength));\n      setMode(\"session\");\n    }\n  }, [time, mode])\n\n\n  const handleReset = () => {\n    setSessionLength(25);\n    setBreakLength(5);\n    setTime(timeFormat(25));\n    setIsActive(false);\n    setIsSessionPassed(false);\n\n  }\n\n  const setTimer = () => {\n    setTime(sessionLength);\n  }\n\n  useInterval(() => { setTime((time) => time - mSeconds) }, isActive ? mSeconds : null)\n\n  const handlePlayPause = () => {\n    if (!isSessionPassed) {\n      setTime(timeFormat(sessionLength));\n      setIsActive(!isActive);\n      setIsSessionPassed(true);\n    } else {\n      setIsActive(!isActive)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Pomodoro Timer\n      </header>\n      <Timer mode={mode} timeDisplay={moment(time).format('mm:ss')} />\n      <div className=\"Tool-section\">\n        <ToolBlock type=\"session\" value={sessionLength} handleClick={handleAdjustment} />\n        <ToolBlock type=\"break\" value={breakLength} handleClick={handleAdjustment} />\n      </div>\n      <Controls active={isActive}\n        handleReset={handleReset}\n        handlePlayPause={handlePlayPause} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}